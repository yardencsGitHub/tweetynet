from collections import namedtuple

import numpy as np
import pandas as pd


SegmentErrorRates = namedtuple(typename='SegmentErrorRates',
                               field_names=('segment_error_rates', 'mean_segment_error_rate'))


def segment_error_rate(prep_csv_path,
                       pred_paths):
    """compute segment error rates,
    given predictions on features extracted
    from the hand annotated, ground truth
    test set, and the same test set
    re-segmented blindly without clean up
    of the segments by hand.

    Parameters
    ----------
    prep_csv_path : str, pathlib.Path
        path to csv generated by running ``vak prep``.
        Used to get ground truth annotation
    pred_paths : dict
        returned by ``hvc.article.predict.predict``,
        where keys are {'ground_truth', 'resegment'},
        and values are paths to flat text files of
        predicted labels -- each line is a predicted labels.

    Returns
    -------
    rates_source_map : dict
        where keys are {'ground_truth', 'resegment'},
        and corresponding values are named tuples with fields
        'segment_error_rates' and 'mean_segment_error_rate'.
        The 'segment_error_rates' is a list of values,
        one for each line in the .txt annotation files.
        The 'mean_segment_error_rate' is the mean across
        the 'segment_error_rates' list.
    """
    import vak

    prep_df = pd.read_csv(prep_csv_path)
    annots = vak.annotation.from_df(prep_df)
    y_true = [''.join(annot.seq.labels.tolist()) for annot in annots]

    seg_error_rate = vak.metrics.SegmentErrorRate()

    rates_source_map = {}
    for preds_source, pred_path in pred_paths.items():
        with pred_path.open('r') as fp:
            y_pred = fp.read().splitlines()

        rates = np.array([
            seg_error_rate(y_pred, y_true)
            for y_pred, y_true in zip(y_pred, y_true)
        ])

        rates_source_map[preds_source] = SegmentErrorRates(segment_error_rates=rates,
                                                           mean_segment_error_rate=rates.mean())

    return rates_source_map
